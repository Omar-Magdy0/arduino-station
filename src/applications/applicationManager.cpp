#include "applicationManager.h"
#include "Configuration.h"
// Menu Grid is like that 
// 1st box 128x20px 
// 2nd box 128x20px (has white rectangle)
// 3rd box 128x20px 

//Menu Items 


#ifndef CUSTOMMAINMENU
#define App1 application("APP1",maintenance)
#define App2 application("APP2",maintenance)
#define App3 application("APP3",maintenance)
#define App4 application("APP4",maintenance)
#define App5 application("APP5",maintenance)
#define App6 application("APP6",maintenance)
#define appMenuSize 6
application menuApps[appMenuSize] = {
App1,
App2,
App3,
App4,
App5,
App6,
};
#endif


/*
                 | 	 MMJO	 |   APRNNG  |  PGCHNG   |  APCSNG   |   MNUI3   |   MNUI2   |   MNUI1   |   MNUI0   |
APMNGCTRL        |     0     |     0     |     0     |     0     |     0     |     0     |     0     |     0     |    


=============== bit 0:3   MENU index bits
               |   MNUI3   |   MNUI2   |   MNUI1   |   MNUI0   |
    APP0       |     0     |     0     |     0     |     0     |
    APP1       |     0     |     0     |     0     |     1     |
    APP2       |     0     |     0     |     1     |     0     |
    APP3       |     0     |     0     |     1     |     1     |
    APP4       |     0     |     1     |     0     |     0     |
    APP5       |     0     |     1     |     0     |     1     |
    APP6       |     0     |     1     |     1     |     0     |
and soo on

			  COULD be used like this for integer operations
			  int16_t dummyByte = 0b000000;
			  dummyByte |= (1<<MNUI3) | (1<<MNUI2) | (1<<MNUI1) | (1<<MNUI0);  
				NOW you have integer for the last 4 bits


=== bit 4 (APPCSNG) represents app Closting State
=== bit 5 (APJSTRN) represents app Just Run State
=== bit 6 (PGCHNG) represents app is running state
=== bit 7 (MMJO) represents app Just Run State

*/
byte APMNGCTRL = 0b10000000;
#define MNUI0 	0
#define MNUI1 	1
#define MNUI2 	2
#define MNUI3 	3
#define APCSNG 	4
#define APJSTRN 5
#define PGCHNG 	6
#define MMJO 	7


int8_t appMenuIndexer(int8_t num){
    if(num > (appMenuSize - 1)){num = 0;}
    else if(num < 0){num = (appMenuSize - 1);}    
    return num;
}

textBox Box1 = textBox("",0,0);

void applicationManager(){
int8_t menuIndex = 0b000000;
menuIndex |= APMNGCTRL & ((1<<MNUI3) | (1<<MNUI2) | (1<<MNUI1) | (1<<MNUI0)); 


//HERE FUNCTIONS FOR WHEN BUTTON ACTION DETECTED
uint8_t clickType = potButtonComb();
if(clickType == S1){menuIndex++;APMNGCTRL &= 0b11110000;
	if(menuIndex > (appMenuSize - 1))menuIndex = 0;
	APMNGCTRL |= menuIndex;APMNGCTRL |= (1<<PGCHNG);}
else if(clickType == L1){menuIndex--;APMNGCTRL &= 0b11110000;
	if(menuIndex < 0)menuIndex = appMenuSize - 1;
	APMNGCTRL |= menuIndex;APMNGCTRL |= (1<<PGCHNG);}
else if(clickType == L3){;}



if( (APMNGCTRL & (1<<MMJO)) || (APMNGCTRL & (1<<PGCHNG)) ){
		display.clearDisplay();
		    char getty[15];
		const char *name = menuApps[appMenuIndexer(menuIndex - 1)].getName();
    	for (uint8_t i = 0; i < 15; i++) {
    	getty[i] = pgm_read_byte(&name[i]);}
		Box1.text = getty;
		Box1.textRectCenterer(0,2,128,20,1);
		Box1.textDisplaySans(WHITE,0);
		name = menuApps[appMenuIndexer(menuIndex)].getName();
    	for (uint8_t i = 0; i < 15; i++) {
    	getty[i] = pgm_read_byte(&name[i]);}
		Box1.text = getty;
		Serial.println(menuIndex);
		Box1.textRectCenterer(0,22,128,20,1);
	    Box1.textDisplaySans(WHITE,0);
		name = menuApps[appMenuIndexer(menuIndex + 1)].getName();
    	for (uint8_t i = 0; i < 15; i++) {
    	getty[i] = pgm_read_byte(&name[i]);}
		Box1.text = getty;
		Box1.textRectCenterer(0,42,128,20,1);
	    Box1.textDisplaySans(WHITE,0);
		display.drawRect(0,22,128,20,WHITE);
	    display.drawRect(1,23,126,18,WHITE);
	    display.display();
	    APMNGCTRL &= ~(1<<MMJO);
		APMNGCTRL &= ~(1<<PGCHNG);
}

}

//maintenance Screen
#ifdef sad
const unsigned char maintenanceScreen [] PROGMEM = {
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x03, 0xff, 0xff, 0xf1, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x01, 0xff, 0x81, 0xf0, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0xfe, 0x00, 0x70, 0x7f, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x7c, 0x00, 0x38, 0x7f, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0x80, 0x7c, 0x00, 0x1c, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xc0, 0x7e, 0x00, 0x0f, 0xff, 
	0xff, 0xff, 0xf3, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x80, 0x3f, 0x00, 0x07, 0xff, 
	0xfb, 0x93, 0x20, 0xc1, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0x00, 0x3f, 0x80, 0x03, 0xff, 
	0xfb, 0x93, 0x26, 0x4f, 0x37, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x3f, 0xc0, 0x01, 0xff, 
	0xfb, 0x91, 0x26, 0x43, 0x27, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x7f, 0xc0, 0x00, 0xff, 
	0xfb, 0x94, 0x27, 0x41, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x7f, 0x80, 0x00, 0x7f, 
	0xfb, 0xb6, 0x26, 0x4f, 0x27, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x3f, 0xc0, 0x00, 0x7f, 
	0xf9, 0x36, 0x26, 0x4f, 0x27, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x1f, 0xe0, 0x00, 0xff, 
	0xf8, 0x37, 0x20, 0xc1, 0x37, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x0e, 0x70, 0x01, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x1c, 0x38, 0x03, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x18, 0x38, 0x1c, 0x07, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x70, 0x1e, 0x0f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xe0, 0x1f, 0x1f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x7f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 
	0xf9, 0xff, 0xff, 0xff, 0xfe, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x01, 0xcf, 0xff, 0xff, 
	0xf8, 0x30, 0x9c, 0x86, 0xf8, 0x30, 0x4f, 0x20, 0x9d, 0x03, 0xff, 0xfc, 0x03, 0x87, 0xff, 0xff, 
	0xfb, 0xb7, 0xdd, 0xbe, 0xf3, 0x93, 0x06, 0x27, 0x8d, 0xcf, 0xff, 0xfe, 0x07, 0x00, 0x0f, 0xff, 
	0xfb, 0x90, 0xc9, 0x86, 0xf3, 0x93, 0x06, 0x27, 0x85, 0xcf, 0xff, 0xc7, 0x0e, 0x00, 0x03, 0xff, 
	0xfb, 0x90, 0xc9, 0x86, 0xf7, 0xd0, 0x48, 0x20, 0x95, 0xcf, 0xff, 0x83, 0x9e, 0x00, 0x01, 0xff, 
	0xfb, 0x97, 0xeb, 0xbe, 0xf3, 0x90, 0xc9, 0x27, 0x91, 0xcf, 0xff, 0x01, 0xff, 0x00, 0x01, 0xff, 
	0xfb, 0x37, 0xe3, 0x9e, 0x73, 0x93, 0xcf, 0x27, 0x99, 0xcf, 0xfe, 0x00, 0xff, 0x80, 0x00, 0xff, 
	0xf8, 0x70, 0xe3, 0x82, 0x08, 0x33, 0xcf, 0x20, 0x99, 0xcf, 0xf8, 0x00, 0xff, 0x80, 0x00, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0x80, 0x00, 0x7f, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0xff, 0x00, 0x00, 0x7f, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x01, 0xff, 0x00, 0x30, 0x7f, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0x80, 0xf8, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0x80, 0x7c, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x0f, 0xff, 0x80, 0x3f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xc0, 0x1f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x7f, 0xff, 0xe0, 0x0f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xf0, 0x0f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xfc, 0x1f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
#endif

void maintenance(){
  #ifdef sad
    display.clearDisplay();
    display.drawBitmap(0,0,maintenanceScreen,128,64,WHITE);
    display.display();
	if(appClosing){
//do whatever you want before closing app
	appClosing = false;
	appRunning = false;
	}
#endif
}







